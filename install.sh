#!/bin/bash

set -e

# Ê£ÄÊµãÂπ∂Ëá™Âä®ÂÆâË£Ö Xcode Command Line ToolsÔºà‰ªÖÈôê macOSÔºâ
if [[ "$(uname -s)" == "Darwin" ]]; then
    echo "üõ† Ê£ÄÊü• Xcode Command Line Tools ÊòØÂê¶Â∑≤ÂÆâË£Ö..."
    echo "üõ† Checking if Xcode Command Line Tools is installed..."
    # Ê£ÄÊü• command line tools ÊòØÂê¶Â≠òÂú®
    if ! xcode-select -p &>/dev/null; then
        echo "‚ùóÔ∏èÊú™Ê£ÄÊµãÂà∞ Xcode Command Line ToolsÔºåÊ≠£Âú®‰∏∫ÊÇ®Ëá™Âä®ÂÆâË£Ö..."
        echo "‚ùóÔ∏èXcode Command Line Tools not detected, installing automatically..."
        echo "   (‰ºöÂºπÂá∫ÂÆâË£ÖÁ™óÂè£ÔºåËØ∑ÊåâÁÖßÊèêÁ§∫Êìç‰ΩúÔºåÂÆâË£ÖÂÆåÊàêÂêéÊåâÂõûËΩ¶ÁªßÁª≠)"
        echo "   (Installation window will pop up, please follow the instructions and press Enter to continue after installation)"
        xcode-select --install

        # Á≠âÂæÖÁî®Êà∑ÂÆâË£ÖÂÆåÊàê
        read -p "‚úÖ ÂÆâË£ÖÂÆåÊàêÂêéËØ∑ÊåâÂõûËΩ¶ÁªßÁª≠... (Press Enter after the installation is finished): " 
        # ÂÜçÊ¨°Ê£ÄÊµã
        if ! xcode-select -p &>/dev/null; then
            echo "‚ùå Command Line Tools ‰ªçÊú™ÂÆâË£ÖÔºåÊó†Ê≥ïÁªßÁª≠„ÄÇËØ∑ÂÆâË£ÖÂêéÈáçÊñ∞ËøêË°åÊú¨ËÑöÊú¨„ÄÇ"
            echo "‚ùå Command Line Tools still not installed, cannot continue. Please install and run the script again."
            exit 1
        fi
        echo "‚úÖ Command Line Tools Â∑≤ÂÆâË£ÖÔºåÁªßÁª≠‰∏ã‰∏ÄÊ≠•..."
        echo "‚úÖ Command Line Tools installed, continuing..."
    else
        echo "‚úÖ Xcode Command Line Tools Â∑≤ÂÆâË£Ö"
        echo "‚úÖ Xcode Command Line Tools is installed"
    fi
fi

install_nodejs() {
    local platform=$(uname -s)
    
    case "$platform" in
        Linux|Darwin)
            echo "üöÄ Installing Node.js on Unix/Linux/macOS..."
            echo "üöÄ Ê≠£Âú® Unix/Linux/macOS ‰∏äÂÆâË£Ö Node.js..."
            
            echo "üì• Downloading and installing nvm..."
            echo "üì• Ê≠£Âú®‰∏ãËΩΩÂπ∂ÂÆâË£Ö nvm..."
            
            # Â∞ùËØïÂ§ö‰∏™ÈïúÂÉèÊ∫ê‰∏ãËΩΩ nvm
            nvm_installed=false
            nvm_urls=(
                "https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh"
                "https://gitee.com/mirrors/nvm/raw/v0.40.3/install.sh"
                "https://cdn.jsdelivr.net/gh/nvm-sh/nvm@v0.40.3/install.sh"
            )
            
            for url in "${nvm_urls[@]}"; do
                echo "üîÑ Trying to download from: $url"
                echo "üîÑ Â∞ùËØï‰ªé‰ª•‰∏ãÂú∞ÂùÄ‰∏ãËΩΩ: $url"
                
                if curl -o- --connect-timeout 30 --max-time 120 "$url" | bash; then
                    nvm_installed=true
                    echo "‚úÖ NVM installation successful from: $url"
                    echo "‚úÖ NVM ‰ªé‰ª•‰∏ãÂú∞ÂùÄÂÆâË£ÖÊàêÂäü: $url"
                    break
                else
                    echo "‚ùå Failed to download from: $url, trying next mirror..."
                    echo "‚ùå ‰ªé‰ª•‰∏ãÂú∞ÂùÄ‰∏ãËΩΩÂ§±Ë¥•: $urlÔºåÂ∞ùËØï‰∏ã‰∏Ä‰∏™ÈïúÂÉè..."
                fi
            done
            
            if [ "$nvm_installed" = false ]; then
                echo "‚ùå All NVM download attempts failed. Please check your network connection."
                echo "‚ùå ÊâÄÊúâ NVM ‰∏ãËΩΩÂ∞ùËØïÈÉΩÂ§±Ë¥•‰∫Ü„ÄÇËØ∑Ê£ÄÊü•ÊÇ®ÁöÑÁΩëÁªúËøûÊé•„ÄÇ"
                echo "üí° You can try running the script again or install Node.js manually."
                echo "üí° ÊÇ®ÂèØ‰ª•Â∞ùËØïÈáçÊñ∞ËøêË°åËÑöÊú¨ÊàñÊâãÂä®ÂÆâË£Ö Node.js„ÄÇ"
                exit 1
            fi
            
            echo "üîÑ Loading nvm environment..."
            echo "üîÑ Ê≠£Âú®Âä†ËΩΩ nvm ÁéØÂ¢É..."
            
            # Ê£ÄÊü• nvm.sh ÊòØÂê¶Â≠òÂú®
            if [ ! -f "$HOME/.nvm/nvm.sh" ]; then
                echo "‚ùå NVM installation failed. File $HOME/.nvm/nvm.sh not found."
                echo "‚ùå NVM ÂÆâË£ÖÂ§±Ë¥•„ÄÇÊú™ÊâæÂà∞Êñá‰ª∂ $HOME/.nvm/nvm.sh„ÄÇ"
                exit 1
            fi
            
            # ËÆæÁΩÆ NVM ÁéØÂ¢ÉÂèòÈáè
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            
            # È™åËØÅ nvm ÊòØÂê¶ÂèØÁî®
            if ! command -v nvm &> /dev/null; then
                echo "‚ùå NVM command not available after installation."
                echo "‚ùå ÂÆâË£ÖÂêé NVM ÂëΩ‰ª§‰∏çÂèØÁî®„ÄÇ"
                exit 1
            fi
            
            # Ê£ÄÊü•Âπ∂‰øÆÂ§ç npm ÈÖçÁΩÆÂÜ≤Á™Å
            if [ -f "$HOME/.npmrc" ]; then
                echo "üîß Checking npm configuration for conflicts..."
                echo "üîß Ê£ÄÊü• npm ÈÖçÁΩÆÂÜ≤Á™Å..."
                
                # Â§á‰ªΩÂéüÂßã .npmrc
                cp "$HOME/.npmrc" "$HOME/.npmrc.backup.$(date +%Y%m%d_%H%M%S)"
                echo "üìã Backed up original .npmrc to .npmrc.backup.$(date +%Y%m%d_%H%M%S)"
                echo "üìã Â∑≤Â§á‰ªΩÂéüÂßã .npmrc Âà∞ .npmrc.backup.$(date +%Y%m%d_%H%M%S)"
                
                # ÁßªÈô§ÂÜ≤Á™ÅÁöÑÈÖçÁΩÆÈ°π
                if grep -q "prefix\|globalconfig" "$HOME/.npmrc"; then
                    echo "üîß Removing conflicting npm configurations..."
                    echo "üîß ÁßªÈô§ÂÜ≤Á™ÅÁöÑ npm ÈÖçÁΩÆ..."
                    
                    # ÂàõÂª∫‰∏¥Êó∂Êñá‰ª∂ÔºåÁßªÈô§ prefix Âíå globalconfig Ë°å
                    grep -v "^prefix\|^globalconfig" "$HOME/.npmrc" > "$HOME/.npmrc.tmp" || true
                    mv "$HOME/.npmrc.tmp" "$HOME/.npmrc"
                fi
            fi
            
            echo "üì¶ Downloading and installing Node.js v22..."
            echo "üì¶ Ê≠£Âú®‰∏ãËΩΩÂπ∂ÂÆâË£Ö Node.js v22..."
            
            # Â∞ùËØïÂÆâË£Ö Node.jsÔºåÂ¶ÇÊûúÂ§±Ë¥•ÂàôÈáçËØï
            max_retries=3
            retry_count=0
            
            while [ $retry_count -lt $max_retries ]; do
                if nvm install 22; then
                    echo "‚úÖ Node.js v22 installation successful!"
                    echo "‚úÖ Node.js v22 ÂÆâË£ÖÊàêÂäüÔºÅ"
                    
                    # ËÆæÁΩÆÈªòËÆ§ÁâàÊú¨
                    nvm use 22
                    nvm alias default 22
                    
                    break
                else
                    retry_count=$((retry_count + 1))
                    echo "‚ùå Node.js installation failed. Retry $retry_count/$max_retries..."
                    echo "‚ùå Node.js ÂÆâË£ÖÂ§±Ë¥•„ÄÇÈáçËØï $retry_count/$max_retries..."
                    
                    if [ $retry_count -eq $max_retries ]; then
                        echo "‚ùå Node.js installation failed after $max_retries attempts."
                        echo "‚ùå Node.js ÂÆâË£ÖÂú® $max_retries Ê¨°Â∞ùËØïÂêéÂ§±Ë¥•„ÄÇ"
                        exit 1
                    fi
                    
                    sleep 5
                fi
            done
            
            echo -n "‚úÖ Node.js installation completed! Version: "
            echo -n "‚úÖ Node.js ÂÆâË£ÖÂÆåÊàêÔºÅÁâàÊú¨: "
            node -v
            echo -n "‚úÖ Current nvm version: "
            echo -n "‚úÖ ÂΩìÂâç nvm ÁâàÊú¨: "
            nvm current
            echo -n "‚úÖ npm version: "
            echo -n "‚úÖ npm ÁâàÊú¨: "
            npm -v
            ;;
        *)
            echo "Unsupported platform: $platform"
            echo "‰∏çÊîØÊåÅÁöÑÂπ≥Âè∞: $platform"
            exit 1
            ;;
    esac
}

# Check if Node.js is already installed and version is >= 18
if command -v node >/dev/null 2>&1; then
    current_version=$(node -v | sed 's/v//')
    major_version=$(echo $current_version | cut -d. -f1)
    
    if [ "$major_version" -ge 18 ]; then
        echo "Node.js is already installed: v$current_version"
        echo "Node.js Â∑≤ÂÆâË£Ö: v$current_version"
    else
        echo "Node.js v$current_version is installed but version < 18. Upgrading..."
        echo "Node.js v$current_version Â∑≤ÂÆâË£ÖÔºå‰ΩÜÁâàÊú¨ < 18„ÄÇÊ≠£Âú®ÂçáÁ∫ß..."
        install_nodejs
    fi
else
    echo "Node.js not found. Installing..."
    echo "Êú™ÊâæÂà∞ Node.js„ÄÇÊ≠£Âú®ÂÆâË£Ö..."
    install_nodejs
fi

# Check if Claude Code is already installed
if command -v claude >/dev/null 2>&1; then
    echo "Claude Code is already installed: $(claude --version)"
    echo "Claude Code Â∑≤ÂÆâË£Ö: $(claude --version)"
else
    echo "Claude Code not found. Installing..."
    echo "Êú™ÊâæÂà∞ Claude Code„ÄÇÊ≠£Âú®ÂÆâË£Ö..."
    
    # Attempt to install globally with npm
    npm install -g @anthropic-ai/claude-code || {
        echo "‚ö†Ô∏è  Global installation failed. Attempting to install locally in user directory..."
        echo "‚ö†Ô∏è  ÂÖ®Â±ÄÂÆâË£ÖÂ§±Ë¥•„ÄÇÂ∞ùËØïÂú®Áî®Êà∑ÁõÆÂΩï‰∏≠ËøõË°åÊú¨Âú∞ÂÆâË£Ö..."
        
        # Create a local directory for npm global installs
        mkdir -p ~/.npm-global
        npm config set prefix '~/.npm-global'
        
        # Update PATH for local npm installs
        echo 'export PATH=~/.npm-global/bin:$PATH' >> ~/.bashrc
        echo 'export PATH=~/.npm-global/bin:$PATH' >> ~/.zshrc
        
        # Reload shell configuration
        source ~/.bashrc 2>/dev/null || source ~/.zshrc 2>/dev/null || true
        
        # Update current session PATH
        export PATH=~/.npm-global/bin:$PATH
        
        # Retry installing the package
        npm install -g @anthropic-ai/claude-code
    }
fi

# Configure Claude Code to skip onboarding
echo "Configuring Claude Code to skip onboarding..."
echo "Ê≠£Âú®ÈÖçÁΩÆ Claude Code Ë∑≥ËøáÂÖ•Èó®..."
node --eval '
    const os = require("os");
    const path = require("path");
    const fs = require("fs");
    const homeDir = os.homedir(); 
    const filePath = path.join(homeDir, ".claude.json");
    if (fs.existsSync(filePath)) {
        const content = JSON.parse(fs.readFileSync(filePath, "utf-8"));
        fs.writeFileSync(filePath, JSON.stringify({ ...content, hasCompletedOnboarding: true }, null, 2), "utf-8");
    } else {
        fs.writeFileSync(filePath, JSON.stringify({ hasCompletedOnboarding: true }, null, 2), "utf-8");
    }'

# Check if API key is provided via environment variable
if [ -n "$API_KEY" ]; then
    echo "‚úÖ API key detected from environment variable/Ê£ÄÊµãÂà∞ÁéØÂ¢ÉÂèòÈáè‰∏≠ÁöÑAPIÂØÜÈí•"
    api_key="$API_KEY"
else
    # Prompt user for API key
    echo "üîë Please enter your API key/ËØ∑ËæìÂÖ•ÊÇ®ÁöÑAPI KeyÔºàÁßòÈí•Ôºâ:"
    echo "   You can get your API key from/ÊÇ®ÂèØÂú®ËøôÈáåËé∑ÂèñÊÇ®ÁöÑÁßòÈí•: https://o3.fan/token"
    echo "   Note: The input is hidden for security. Please paste your API key directly/ËæìÂÖ•ÂÜÖÂÆπÂ∑≤ÈöêËóè‰ª•Á°Æ‰øùÂÆâÂÖ®,ËØ∑Áõ¥Êé•Á≤òË¥¥ÊÇ®ÁöÑAPIÂØÜÈí•„ÄÇ"
    echo ""
    read -s api_key
    echo ""
fi

if [ -z "$api_key" ]; then
    echo "‚ö†Ô∏è  API key cannot be empty. Please run the script again./API ÂØÜÈí•‰∏çËÉΩ‰∏∫Á©∫„ÄÇËØ∑ÂÜçÊ¨°ËøêË°åËÑöÊú¨„ÄÇ"
    exit 1
fi

# Check if MODEL is provided via environment variable
if [ -n "$MODEL" ]; then
    echo "‚úÖ Model detected from environment variable: $MODEL/Ê£ÄÊµãÂà∞ÁéØÂ¢ÉÂèòÈáè‰∏≠ÁöÑÊ®°Âûã: $MODEL"
    claude_model="$MODEL"
else
    # Prompt user for model selection
    echo "ü§ñ Please select a model/ËØ∑ÈÄâÊã©Ê®°Âûã (Default: claude-sonnet-4-20250514/ÈªòËÆ§: claude-sonnet-4-20250514):"
    echo "   1. claude-3-7-sonnet-20250219"
    echo "   2. claude-3-7-sonnet-20250219-thinking"
    echo "   3. claude-opus-4-20250514"
    echo "   4. claude-opus-4-20250514-thinking"
    echo "   5. claude-sonnet-4-20250514-thinking"
    echo "   6. Custom model name/Ëá™ÂÆö‰πâÊ®°ÂûãÂêçÁß∞"
    echo "   Press Enter to use default/ÊåâÂõûËΩ¶‰ΩøÁî®ÈªòËÆ§ÂÄº"
    echo ""
    read -p "Enter your choice (1-6) or press Enter for default/ËæìÂÖ•ÊÇ®ÁöÑÈÄâÊã© (1-6) ÊàñÊåâÂõûËΩ¶‰ΩøÁî®ÈªòËÆ§ÂÄº: " model_choice

    case "$model_choice" in
        1)
            claude_model="claude-3-7-sonnet-20250219"
            ;;
        2)
            claude_model="claude-3-7-sonnet-20250219-thinking"
            ;;
        3)
            claude_model="claude-opus-4-20250514"
            ;;
        4)
            claude_model="claude-opus-4-20250514-thinking"
            ;;
        5)
            claude_model="claude-sonnet-4-20250514-thinking"
            ;;
        6)
            echo "Please enter custom model name/ËØ∑ËæìÂÖ•Ëá™ÂÆö‰πâÊ®°ÂûãÂêçÁß∞:"
            read -p "Custom model name/Ëá™ÂÆö‰πâÊ®°ÂûãÂêçÁß∞: " claude_model
            if [ -z "$claude_model" ]; then
                claude_model="claude-sonnet-4-20250514"
            fi
            ;;
        *)
            claude_model="claude-sonnet-4-20250514"
            ;;
    esac
fi

echo "Selected model/Â∑≤ÈÄâÊã©Ê®°Âûã: $claude_model"

# Check if MAX_TOKENS is provided via environment variable
if [ -n "$MAX_TOKENS" ]; then
    echo "‚úÖ Max tokens detected from environment variable: $MAX_TOKENS/Ê£ÄÊµãÂà∞ÁéØÂ¢ÉÂèòÈáè‰∏≠ÁöÑÊúÄÂ§ß‰ª§ÁâåÊï∞: $MAX_TOKENS"
    max_tokens="$MAX_TOKENS"
else
    # Prompt user for max output tokens
    echo ""
    echo "üìä Please set max output tokens/ËØ∑ËÆæÁΩÆÊúÄÂ§ßËæìÂá∫‰ª§ÁâåÊï∞ (Default: 64000/ÈªòËÆ§: 64000):"
    echo "   1. Use default (64000)/‰ΩøÁî®ÈªòËÆ§ÂÄº (64000)"
    echo "   2. Custom value/Ëá™ÂÆö‰πâÂÄº"
    echo ""
    read -p "Enter your choice (1-2) or press Enter for default/ËæìÂÖ•ÊÇ®ÁöÑÈÄâÊã© (1-2) ÊàñÊåâÂõûËΩ¶‰ΩøÁî®ÈªòËÆ§ÂÄº: " token_choice

    case "$token_choice" in
        2)
            echo "Please enter custom max output tokens/ËØ∑ËæìÂÖ•Ëá™ÂÆö‰πâÊúÄÂ§ßËæìÂá∫‰ª§ÁâåÊï∞:"
            read -p "Max output tokens/ÊúÄÂ§ßËæìÂá∫‰ª§ÁâåÊï∞: " max_tokens
            if [ -z "$max_tokens" ]; then
                max_tokens="64000"
            fi
            ;;
        *)
            max_tokens="64000"
            ;;
    esac
fi

# Validate the max_tokens value
if ! [[ "$max_tokens" =~ ^[0-9]+$ ]] || [ "$max_tokens" -le 0 ] || [ "$max_tokens" -gt 64000 ]; then
    echo "‚ö†Ô∏è Invalid value for max tokens. Setting to default (64000)."
    echo "‚ö†Ô∏è ÊúÄÂ§ßËæìÂá∫‰ª§ÁâåÊï∞ÂÄºÊó†Êïà„ÄÇËÆæÁΩÆ‰∏∫ÈªòËÆ§ÂÄº (64000)„ÄÇ"
    max_tokens="64000"
fi

# Convert to integer
max_tokens=$(printf "%d" "$max_tokens")

echo "Max output tokens set to/ÊúÄÂ§ßËæìÂá∫‰ª§ÁâåÊï∞ËÆæÁΩÆ‰∏∫: $max_tokens"

# Detect current shell and determine rc file
current_shell=$(basename "$SHELL")
case "$current_shell" in
    bash)
        rc_file="$HOME/.bashrc"
        ;;
    zsh)
        rc_file="$HOME/.zshrc"
        ;;
    fish)
        rc_file="$HOME/.config/fish/config.fish"
        ;;
    *)
        rc_file="$HOME/.profile"
        ;;
esac

# Add environment variables to rc file
echo ""
echo "üìù Adding environment variables to $rc_file.../Ê≠£Âú®Âêë$rc_fileÊ∑ªÂä†ÁéØÂ¢ÉÂèòÈáè..."

# Check if variables already exist to avoid duplicates
if [ -f "$rc_file" ] && grep -q "ANTHROPIC_BASE_URL\|ANTHROPIC_API_KEY\|CLAUDE_MODEL\|CLAUDE_CODE_MAX_OUTPUT_TOKENS" "$rc_file"; then
    echo "‚ö†Ô∏è Environment variables already exist in $rc_file. Skipping.../ÁéØÂ¢ÉÂèòÈáèÂ∑≤Â≠òÂú®‰∫é $rc_file ‰∏≠„ÄÇË∑≥Ëøá..."
else
    # Append new entries
    echo "" >> "$rc_file"
    echo "# Claude Code environment variables" >> "$rc_file"
    echo "export ANTHROPIC_BASE_URL=https://api.o3.fan" >> "$rc_file"
    echo "export ANTHROPIC_API_KEY=$api_key" >> "$rc_file"
    echo "export CLAUDE_MODEL=$claude_model" >> "$rc_file"
    echo "export CLAUDE_CODE_MAX_OUTPUT_TOKENS=$max_tokens" >> "$rc_file"
    echo "‚úÖ Environment variables added to $rc_file/‚úÖ ÁéØÂ¢ÉÂèòÈáèÂ∑≤Ê∑ªÂä†Âà∞ $rc_file"
fi

# Refresh current session environment variables
export ANTHROPIC_BASE_URL=https://api.o3.fan
export ANTHROPIC_API_KEY="$api_key"
export CLAUDE_MODEL="$claude_model"
export CLAUDE_CODE_MAX_OUTPUT_TOKENS="$max_tokens"

echo ""
echo "üéâ Installation completed successfully!"
echo "üéâ ÂÆâË£ÖÊàêÂäüÂÆåÊàêÔºÅ"
echo ""
echo "üîÑ Please restart your terminal or run:"
echo "üîÑ ËØ∑ÈáçÊñ∞ÂêØÂä®ÊÇ®ÁöÑÁªàÁ´ØÊàñËøêË°åÔºö"
echo "   source $rc_file"
echo ""
echo "üöÄ Then you can start using Claude Code with:"
echo "üöÄ ÁÑ∂ÂêéÊÇ®ÂèØ‰ª•‰ΩøÁî® Claude CodeÔºöÔºà‰ΩøÁî®ÊñπÊ≥ïÔºöÂÖ≥Èó≠ËØ•Á™óÂè£ÔºåÂÜçÊ¨°ÊâìÂºÄÁªàÁ´ØËæìÂÖ•Ôºöclaude  Âç≥ÂèØ‰ΩøÁî®Ôºâ"
echo "   claude"
echo ""
echo "üìã Configuration Summary/ÈÖçÁΩÆÊëòË¶Å:"
echo "   API Base URL/API Âü∫Á°ÄÂú∞ÂùÄ: https://api.o3.fan"
echo "   Model/Ê®°Âûã: $claude_model"
echo "   Max Output Tokens/ÊúÄÂ§ßËæìÂá∫‰ª§ÁâåÊï∞: $max_tokens"
